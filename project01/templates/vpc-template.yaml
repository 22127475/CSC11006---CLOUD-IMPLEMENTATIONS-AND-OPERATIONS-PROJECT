AWSTemplateFormatVersion: "2010-09-09"
Description: VPC and Networking layer template for Project 01 
              (VPC, Subnets, Internet Gateway, Route Table, Security Groups, NACLs)

Resources:
  # VPC
  # Create a VPC with a CIDR block of, This VPC used to host Aurora DB, EC2 instances and ElastiCache Valkey Cluster
  Project01VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Project01-VPC

  # Subnets
  # Create two public subnets in different availability zones
  PublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Project01VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Project01-Public-Subnet-1a

  PublicSubnet1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Project01VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Project01-Public-Subnet-1b

  # Create two private subnets in different availability zones
  PrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Project01VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Project01-Private-Subnet-1a

  PrivateSubnet1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Project01VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Project01-Private-Subnet-1b

  # Internet Gateway
  # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: project01-IGW

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Project01VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  # Create a route table for the public subnets
  # This route table will allow traffic to the Internet Gateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Project01VPC
      Tags:
        - Key: Name
          Value: Project01-Public-Subnet-RTB

  # Create a route in the public route table to allow traffic to the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate the public subnets with the public route table
  PublicSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1BRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1B
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  # SG for the Application Load Balancer
  # Allows inbound web traffic from the internet.
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the Application Load Balancer"
      VpcId: !Ref Project01VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Project01-ALB-SG

  # SG for the Application Tier (EC2 Instances)
  # Allows traffic from the ALB and SSH for management.
  AppTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the Application Tier (EC2 Instances)"
      VpcId: !Ref Project01VPC
      SecurityGroupIngress:
        # Rule for SSH access for management
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # Rule for Front-End/debugging access on port 8080 from anywhere
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        # Rule for services to communicate with each other
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3003
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Project01-App-Tier-SG

  # SG for the Data Tier (Aurora DB Cluster)
  # Will have an ingress rule added below to allow traffic from the Proxy Tier.
  DataTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the Data Tier (Aurora DB)"
      VpcId: !Ref Project01VPC
      Tags:
        - Key: Name
          Value: Project01-Data-Tier-SG

  # SG for the RDS Proxy Tier
  # Will have an ingress rule added below to allow traffic from the App Tier.
  ProxyTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the RDS Proxy Tier"
      VpcId: !Ref Project01VPC
      Tags:
        - Key: Name
          Value: Project01-Proxy-Tier-SG

  # SG for the Caching Tier (ElastiCache)
  # Will have an ingress rule added below to allow traffic from the App Tier.
  CacheTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the Caching Tier (ElastiCache)"
      VpcId: !Ref Project01VPC
      Tags:
        - Key: Name
          Value: Project01-Cache-Tier-SG

  # --- Define Ingress Rules to connect the tiers ---

  # Rule: Allow App Tier (EC2) to connect to Proxy Tier on port 5432
  AppToProxyIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ProxyTierSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref AppTierSecurityGroup

  # Rule: Allow Proxy Tier to connect to Data Tier (DB) on port 5432
  ProxyToDBIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DataTierSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref ProxyTierSecurityGroup
      
  # Rule: Allow App Tier (EC2) to connect to Cache Tier on port 6379
  AppToCacheIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CacheTierSecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: !Ref AppTierSecurityGroup

  # NACLs
  # Create a Network ACL for the public subnets
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Project01VPC
      Tags:
        - Key: Name
          Value: Project01-Public-NACL

  # Rules for Public NACL
  # -- INBOUND RULES --
  # Rules allowing traffic to the ports used by the application
  PublicNACLInboundAllowAppPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3001
        To: 8080

  # Rule allowing SSH traffic
  PublicNACLInboundAllowSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 110
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  # Rule allowing ephemeral ports (for return traffic)
  PublicNACLInboundAllowEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 120
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # -- OUTBOUND RULES  --
  # Rule allowing all outbound traffic
  PublicNACLOutboundAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1 # All traffic
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  # Create a Network ACL for the private subnets
  PrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Project01VPC
      Tags:
        - Key: Name
          Value: Project01-Private-NACL

  # Rules for Private NACL
  # -- INBOUND RULES --
  # Rule allowing traffic from within the VPC to the private subnets
  PrivateNACLInboundAllowInternal:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 100
      Protocol: -1 # All traffic
      RuleAction: allow
      Egress: false
      CidrBlock: !GetAtt Project01VPC.CidrBlock

  # -- OUTBOUND RULES --
  # Rule allowing traffic to the addresses within the VPC
  PrivateNACLOutboundAllowInternal:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 100
      Protocol: -1 # All traffic
      RuleAction: allow
      Egress: true
      CidrBlock: !GetAtt Project01VPC.CidrBlock # Chỉ cho phép traffic đi đến các nơi khác trong VPC

  # Attach the NACLs to the subnets
  PublicSubnet1AAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1A
      NetworkAclId: !Ref PublicNACL

  PublicSubnet1BAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1B
      NetworkAclId: !Ref PublicNACL

  PrivateSubnet1AAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1A
      NetworkAclId: !Ref PrivateNACL

  PrivateSubnet1BAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1B
      NetworkAclId: !Ref PrivateNACL


Outputs:
  # VPC Outputs
  VPCId:
    Value: !Ref Project01VPC
    Export:
      Name: Project01-VPC-ID
  PublicSubnet1AId:
    Value: !Ref PublicSubnet1A
    Export:
      Name: Project01-Public-Subnet-1a
  PublicSubnet1BId:
    Value: !Ref PublicSubnet1B
    Export:
      Name: Project01-Public-Subnet-1b
  PrivateSubnet1AId:
    Value: !Ref PrivateSubnet1A
    Export:
      Name: Project01-Private-Subnet-1a
  PrivateSubnet1BId:
    Value: !Ref PrivateSubnet1B
    Export:
      Name: Project01-Private-Subnet-1b

  # Security Groups Outputs
  ALBSecurityGroupId:
    Description: "Security Group ID for the Application Load Balancer"
    Value: !Ref ALBSecurityGroup
    Export:
      Name: Project01-ALB-SG-ID

  AppTierSecurityGroupId:
    Description: "Security Group ID for the Application Tier (EC2)"
    Value: !Ref AppTierSecurityGroup
    Export:
      Name: Project01-App-Tier-SG-ID

  DataTierSecurityGroupId:
    Description: "Security Group ID for the Data Tier (Aurora DB)"
    Value: !Ref DataTierSecurityGroup
    Export:
      Name: Project01-Data-Tier-SG-ID
      
  ProxyTierSecurityGroupId:
    Description: "Security Group ID for the RDS Proxy Tier"
    Value: !Ref ProxyTierSecurityGroup
    Export:
      Name: Project01-Proxy-Tier-SG-ID
      
  CacheTierSecurityGroupId:
    Description: "Security Group ID for the Caching Tier (ElastiCache)"
    Value: !Ref CacheTierSecurityGroup
    Export:
      Name: Project01-Cache-Tier-SG-ID