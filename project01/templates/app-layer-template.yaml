AWSTemplateFormatVersion: "2010-09-09"
Description: Application layer template for Project 01

Parameters:
  # Branch name to clone from the GitHub repository
  BranchName:
    Type: String
    Description: The branch name to clone from the GitHub repository
    Default: main

Resources:
  # Target Group for the Application Load Balancer and Auto Scaling Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Project01-Target-Group
      VpcId: !ImportValue Project01-VPC-ID
      Port: 8080
      Protocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      TargetType: instance
      Tags:
        - Key: Name
          Value: Project01-Target-Group

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Project01-ALB
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Subnets:
        - !ImportValue Project01-Public-Subnet-1a
        - !ImportValue Project01-Public-Subnet-1b
      SecurityGroups:
        - !ImportValue Project01-EC2-SG-ID
        - !ImportValue Project01-EC2toDB-EC2-SG-ID
        - !ImportValue Project01-EC2toElastiCache-EC2-SG-ID
      Tags:
        - Key: Name
          Value: Project01-ALB
  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Tags:
        - Key: Name
          Value: Project01-ALB-Listener
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: my-ec2-launch-template
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-02457590d33d576c3
        KeyName: project01-ec2-keypair
        SecurityGroupIds:
        - !ImportValue Project01-EC2-SG-ID
        - !ImportValue Project01-EC2toDB-EC2-SG-ID
        - !ImportValue Project01-EC2toElastiCache-EC2-SG-ID
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 10
              VolumeType: gp3
              DeleteOnTermination: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: project01-ec2-webserver
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -xe
                # Update and install necessary packages
                dnf update -y
                dnf install -y git
                sudo dnf install postgresql17 -y
                curl -sL https://rpm.nodesource.com/setup_18.x | bash -
                dnf install -y nodejs

                # clone the repository
                git clone -b ${BranchName} https://22127475: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@github.com/22127475/CSC11006---CLOUD-IMPLEMENTATIONS-AND-OPERATIONS-PROJECT.git /home/ec2-user/prj01

                # make log directory
                LOG_DIR="/home/ec2-user/logs"
                mkdir -p $LOG_DIR
                
                # DB connection details
                DB_HOST=${DBEndpoint}
                DB_PORT=5432
                DB_USER=prj01
                DB_NAME=coffee
                DB_PASSWORD="From1to10"
                
                # Cache connection details
                CACHE_ENDPOINT=${CacheEndpoint}
                CACHE_PORT=${CachePort}

                # Application details
                APP_JWT_SECTET="my_super_secret_key_123456"
                
                ## Get the public IP address of the instance
                TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
                APP_URL=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4/)
                APP_PORT=8080

                ALB_DNS=${ALB_DNS}

                # Run AuthService
                cd /home/ec2-user/prj01/project01/Web/AuthService

                echo -e "
                DB_HOST=$DB_HOST\n
                DB_PORT=$DB_PORT\n
                DB_USER=$DB_USER\n
                DB_PASSWORD=$DB_PASSWORD\n
                DB_NAME=$DB_NAME\n
                PORT=3001\n
                JWT_SECRET=$APP_JWT_SECTET\n
                HOST_URL=http://$APP_URL:$APP_PORT\n
                ALB_DNS=$ALB_DNS" > .env
                
                
                npm install
                npm install react
                # node server.js &
                nohup node server.js > $LOG_DIR/authservice.log 2>&1 &

                # Run OrderService
                cd /home/ec2-user/prj01/project01/Web/OrderService
                
                echo -e "
                DB_HOST=$DB_HOST\n
                DB_PORT=$DB_PORT\n
                DB_USER=$DB_USER\n
                DB_PASSWORD=$DB_PASSWORD\n
                DB_NAME=$DB_NAME\n
                PORT=3003\n
                JWT_SECRET=$APP_JWT_SECTET\n
                HOST_URL=http://$APP_URL:$APP_PORT\n
                ALB_DNS=$ALB_DNS" > .env
                

                npm install
                # node server.js &
                nohup node server.js > $LOG_DIR/orderservice.log 2>&1 &

                # Run ProductService
                cd /home/ec2-user/prj01/project01/Web/ProductService
                
                echo -e "
                DB_HOST=$DB_HOST\n
                DB_PORT=$DB_PORT\n
                DB_USER=$DB_USER\n
                DB_PASSWORD=$DB_PASSWORD\n
                DB_NAME=$DB_NAME\n
                ELASTICACHE_ENDPOINT=$CACHE_ENDPOINT\n
                ELASTICACHE_PORT=$CACHE_PORT\n
                PORT=3002\n
                JWT_SECRET=$APP_JWT_SECTET\n
                HOST_URL=http://$APP_URL:$APP_PORT\n
                ALB_DNS=$ALB_DNS" > .env
                

                npm install
                npm install ioredis
                nohup node server.js > $LOG_DIR/productservice.log 2>&1 &

                # Run Front-End Service
                cd /home/ec2-user/prj01/project01/Web/Front-End

                echo -e "
                API_BASE_URL=http://$APP_URL\n
                ALB_DNS=$ALB_DNS\n
                " > .env

                npm install
                nohup node app.js > $LOG_DIR/FEservice.log 2>&1 &

            - DBEndpoint: !ImportValue Project01-Aurora-Cluster-Endpoint
              ALB_DNS: !GetAtt ApplicationLoadBalancer.DNSName
              CacheEndpoint: !ImportValue Project01-Cache-EndpointAddress
              CachePort: !ImportValue Project01-Cache-EndpointPort

  AutoScailingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !ImportValue Project01-Public-Subnet-1a
        - !ImportValue Project01-Public-Subnet-1b
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: Project01-ASG
          PropagateAtLaunch: true
Outputs:
  TargetGroupArn:
    Description: ARN of the target group
    Value: !Ref TargetGroup
    Export:
      Name: Project01-Target-Group-ARN

  ApplicationLoadBalancerArn:
    Description: ARN of the application load balancer
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: Project01-ALB-ARN

  ApplicationLoadBalancerDNSName:
    Description: DNS name of the application load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: Project01-ALB-DNSName
